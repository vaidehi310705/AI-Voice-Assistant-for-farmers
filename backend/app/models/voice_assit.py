import speech_recognition as sr
from gtts import gTTS
import playsound
import os

# Speak Marathi text naturally
def speak(text):
    tts = gTTS(text=text, lang='mr')
    tts.save("output.mp3")
    playsound.playsound("output.mp3")
    os.remove("output.mp3")
    print("Assistant:", text)

# Record and transcribe using Google Speech Recognition
def record_and_transcribe(duration=15):
    r = sr.Recognizer()
    with sr.Microphone() as source:
        r.adjust_for_ambient_noise(source)
        print("Recording... Speak now.")
        audio = r.listen(source, phrase_time_limit=duration)
    try:
        # First try Marathi
        query = r.recognize_google(audio, language="mr-IN")
        if query.strip() == "":
            # fallback to English
            query = r.recognize_google(audio, language="en-IN")
        return query
    except sr.UnknownValueError:
        try:
            return r.recognize_google(audio, language="en-IN")
        except:
            return ""
    except sr.RequestError:
        return ""


# Static Q&A for farmers
FAQ = {
    # General questions about farming
    "рд╢реЗрддрд╛рддреАрд▓ рдкрд╛рдгреА рдХрд╕реЗ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрд┐рдд рдХрд░рд╛рд╡реЗ": "рдкрд╛рдгреА рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдирд╛рд╕рд╛рдареА рд╡рд░реНрд╖рд╛рд╡рд╛рдиреБрд╕рд╛рд░ рд╢реЗрддрд╛рддреАрд▓ рдкрд╛рдгреНрдпрд╛рдЪреЗ рдирд┐рдпреЛрдЬрди рдХрд░рд╛рд╡реЗ. рдбреНрд░рд┐рдк рдЗрд░рд┐рдЧреЗрд╢рди, рдкрд╛рдгреАрд╕рд╛рдард╛ рддрд▓рд╛рд╡ рдХрд┐рдВрд╡рд╛ рдкрд╛рдИрдкрд▓рд╛рдЗрдирд╕рд╛рд░рдЦреНрдпрд╛ рдкрджреНрдзрддреА рд╡рд╛рдкрд░рддрд╛ рдпреЗрддрд╛рдд.",
    "рдкреАрдХ рдХрдзреА рдкреЗрд░рд╛рд╡реЗ": "рдкреАрдХ рдкреЗрд░рдгреНрдпрд╛рдЪреА рдпреЛрдЧреНрдп рд╡реЗрд│ рддреНрдпрд╛ рдкрд┐рдХрд╛рдЪреНрдпрд╛ рдкреНрд░рдХрд╛рд░рд╛рд╡рд░ рдЖрдгрд┐ рд╕реНрдерд╛рдирд┐рдХ рд╣рд╡рд╛рдорд╛рдирд╛рд╡рд░ рдЕрд╡рд▓рдВрдмреВрди рдЕрд╕рддреЗ. рд╕реНрдерд╛рдирд┐рдХ рдХреГрд╖реА рдХрд╛рд░реНрдпрд╛рд▓рдп рдХрд┐рдВрд╡рд╛ KVK рдХрдбреВрди рдорд╛рд╣рд┐рддреА рдорд┐рд│рд╡рддрд╛ рдпреЗрдИрд▓.",
    "рдЦрддреЗ рдХрд╢реА рд╡рд╛рдкрд░рд╛рд╡реА": "рд╢реЗрддрд╛рд╕рд╛рдареА рдЦрдд рд╡рд╛рдкрд░рдгреНрдпрд╛рдкреВрд░реНрд╡реА рдорд╛рддреАрдЪреА рдЪрд╛рдЪрдгреА рдХрд░рд╛рд╡реА. NPK рдкреНрд░рдорд╛рдгрд╛рдиреБрд╕рд╛рд░ рдЦрддрд╛рдЪреА рдпреЛрдЧреНрдп рдорд╛рддреНрд░рд╛ рдирд┐рд╢реНрдЪрд┐рдд рдХрд░рд╛.",
    "рдХреАрдЯрдХ рдХрд╕реЗ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░рд╛рд╡реЗ": "рдХреАрдЯрдХ рдкреНрд░рддрд┐рдмрдВрдзрд╛рд╕рд╛рдареА рдЬреИрд╡рд┐рдХ рдкрджреНрдзрддреА рд╡рд╛рдкрд░рд╛. рдХреАрдЯрдХрдирд╛рд╢рдХ рдлрд╡рд╛рд░рдгреА рдХрд░рддрд╛рдирд╛ рдпреЛрдЧреНрдп рдкреНрд░рдорд╛рдг рдЖрдгрд┐ рд╡реЗрд│реЗрдЪреЗ рдкрд╛рд▓рди рдХрд░рд╛.",
    "рдмрд┐рдпрд╛рдгреЗ рдХреБрдареВрди рдорд┐рд│реЗрд▓": "рд╕реНрдерд╛рдирд┐рдХ рдХреГрд╖рд┐ рджреБрдХрд╛рди рдХрд┐рдВрд╡рд╛ KVK рдХрдбреВрди рдкреНрд░рдорд╛рдгрд┐рдд рдмрд┐рдпрд╛рдгреЗ рдорд┐рд│реВ рд╢рдХрддреЗ.",
    
    # Government support / help centers
    "рдХреБрдареЗ рдЬрд╛рдКрди рд╕рд▓реНрд▓рд╛ рдШреНрдпрд╛рд╡рд╛": "рддреБрдордЪреНрдпрд╛ рдЬрд╡рд│рдЪреНрдпрд╛ Krishi Vigyan Kendra (KVK) рдХрд┐рдВрд╡рд╛ рддрд╛рд▓реБрдХрд╛ рдХреГрд╖реА рдХрд╛рд░реНрдпрд╛рд▓рдп рдпреЗрдереЗ рд╕рд▓реНрд▓рд╛ рдШреЗрдК рд╢рдХрддрд╛.",
    "рдХрд╛рдп рдХрд╛рдЧрджрдкрддреНрд░реЗ рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗрдд": "рд╕рд╛рдорд╛рдиреНрдп рдХрд╛рдЧрджрдкрддреНрд░реЗ: рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб, рдЬрдорд┐рди рджрд╛рдЦрд▓рд╛, рдмрдБрдХ рдЦрд╛рддреЗ, Soil Health Card (рдЬрд░ рд▓рд╛рдЧреВ рдЕрд╕реЗрд▓).",
    "рд╢реЗрддрдХрд▒реНрдпрд╛рдВрд╕рд╛рдареА рдХреЛрдгрддреА рдорджрдд рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗ": "рд╢реЗрддрдХрд▒реНрдпрд╛рдВрд╕рд╛рдареА рд╕рд░рдХрд╛рд░рдХрдбреВрди рд╡рд┐рд╡рд┐рдз рдЖрд░реНрдерд┐рдХ рд╡ рддрд╛рдВрддреНрд░рд┐рдХ рдорджрдд рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗ. рд╕реНрдерд╛рдирд┐рдХ рдХреГрд╖реА рдХрд╛рд░реНрдпрд╛рд▓рдпрд╛рддреВрди рдорд╛рд╣рд┐рддреА рдорд┐рд│рд╡рддрд╛ рдпреЗрдИрд▓.",
    
    # Weather / crop info
    "рдЙрджреНрдпрд╛ рдкрд╛рдКрд╕ рдкрдбреЗрд▓ рдХрд╛": "рд╕реНрдерд╛рдирд┐рдХ рд╣рд╡рд╛рдорд╛рди рд╡рд┐рднрд╛рдЧрд╛рдЪреНрдпрд╛ рдЕрд╣рд╡рд╛рд▓рд╛рдиреБрд╕рд╛рд░ рдЙрджреНрдпрд╛рдЪрд╛ рдкрд╛рдКрд╕ рдЕрдВрджрд╛рдЬ рдкрд╛рд╣рддрд╛ рдпреЗрдИрд▓.",
    "рд╣рд╡рд╛рдорд╛рди рдХрд╕реЗ рддрдкрд╛рд╕рд╛рд╡реЗ": "рд╕реНрдерд╛рдирд┐рдХ рд╣рд╡рд╛рдорд╛рди рд╡рд┐рднрд╛рдЧ, рдореЛрдмрд╛рдЗрд▓ рдЕтАНреЕрдкреНрд╕ рдХрд┐рдВрд╡рд╛ рд╡реЗрдмрд╕рд╛рдИрдЯрд╡рд░ рд╣рд╡рд╛рдорд╛рдирд╛рдЪреА рдорд╛рд╣рд┐рддреА рдорд┐рд│рд╡рддрд╛ рдпреЗрддреЗ.",
    "рдкреАрдХ рд╣рд╛рдиреА рднрд░рдкрд╛рдИ рдХрд╢реА рдорд┐рд│рд╡рд╛рд╡реА": "рдЬрд░ рдкрд┐рдХрд╛рдЪреА рд╣рд╛рдиреА рдЭрд╛рд▓реА рдЕрд╕реЗрд▓, рддрд░ FRUITS рдкреНрд▓реЕрдЯрдлреЙрд░реНрдорд╡рд░ Farmer ID рд╕реЛрдмрдд рдиреЛрдВрджрдгреА рдХрд░реВрди рджрд╛рд╡рд╛ рдХрд░рддрд╛ рдпреЗрддреЛ.",
    
    # Market / selling
    "рд╢реЗрддреАрд╕рд╛рдареА рдмрд╛рдЬрд╛рд░рднрд╛рд╡ рдХрд╕реЗ рдорд┐рд│рд╡рд╛рд╡реЗ": "рд╕реНрдерд╛рдирд┐рдХ рдмрд╛рдЬрд╛рд░ рдХрд┐рдВрд╡рд╛ рдСрдирд▓рд╛рдЗрди рдХреГрд╖реА рдкреЛрд░реНрдЯрд▓реНрд╕рд╡рд░ рддреБрдордЪреНрдпрд╛ рдкрд┐рдХрд╛рдВрдЪреЗ рдмрд╛рдЬрд╛рд░рднрд╛рд╡ рдорд┐рд│рд╡рддрд╛ рдпреЗрддрд╛рдд.",
    "рд╢реЗрддреА рдЙрддреНрдкрд╛рджрди рдХрд╕реЗ рд╡рд┐рдХрд╛рд╡реЗ": "Farmer Producer Organization (FPO) рдХрд┐рдВрд╡рд╛ рд╕реНрдерд╛рдирд┐рдХ рдордВрдбрдИрдд рд╡рд┐рдХреНрд░реА рдХрд░рддрд╛ рдпреЗрддреЗ."
}

# Assistant answer using keyword search (Marathi + English)
import difflib

def get_answer(query):
    query_lower = query.lower()
    
    # Check similarity with each key
    best_score = 0
    best_key = None
    for key in FAQ.keys():
        key_lower = key.lower()
        # similarity ratio
        score = difflib.SequenceMatcher(None, query_lower, key_lower).ratio()
        if score > best_score:
            best_score = score
            best_key = key
    
    if best_score > 0.5:  # adjust cutoff as needed
        return FAQ[best_key]
    return "рдорд╛рдл рдХрд░рд╛, рд╕рдзреНрдпрд╛ рдЙрддреНрддрд░ рдЙрдкрд▓рдмреНрдз рдирд╛рд╣реА."


# Main assistant flow
def main():
    speak("рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ рд╢реЗрддрдХрд░реА рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ. рддреБрдореНрд╣реА рдХрд╛рд╣реА рд╡рд┐рдЪрд╛рд░реВ рд╢рдХрддрд╛.")
    
    query = record_and_transcribe(duration=15)
    if not query:
        speak("рдорд╛рдл рдХрд░рд╛, рдХрд╛рд╣реА рдРрдХреВ рдЖрд▓реЗ рдирд╛рд╣реА. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдмреЛрд▓рд╛.")
        return
    speak("рддреБрдореНрд╣реА рдореНрд╣рдгрд╛рд▓рд╛рдд: " + query)
    
    answer = get_answer(query)
    speak(answer)
    
    speak("ЁЯЩП рдзрдиреНрдпрд╡рд╛рдж! рднреЗрдЯреВрдпрд╛ рдкреБрдиреНрд╣рд╛.")

if __name__ == "__main__":
    main()
